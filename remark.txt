27.06.2023
3. руты
* я понимаю, что пункт в работе, но все же - каждому руту должен соответствовать экшн в контроллере, такого, как в /panalAdmin быть
  не должно
* +(микро совет на будущее - если вы работаете с phpstorm (надеюсь, что так оно и есть), посматривайте, какие ошибки вам подсвечивает
  плагин (например, https://plugins.jetbrains.com/plugin/7532-laravel) - да и сам шторм опечатки подсвечивает (panel должно быть
  вместо panal) в целом, в остальном тут все ок)
4. модели
* +(модель всегда именуется в единственном числе, тк в объекте, когда вы будете с ней работать - это всегда одна сущность из таблицы
  фильмы, то есть - один фильм опять таки, не забудьте потом использовать relations для работы со связями между таблицами
  (как есть сейчас в User, но это конечно работать не будет - тк нет ключей, по которым все должно быть связано) связи мы именуем
  как обычный метод - в camelCase, а не в snakecase (hallConfigs, а не hallsconfig))
5. реквесты для валидации данных - отлично, их обязательно надо использовать (при создании/апдейте/удалении любой сущности также)
6. контроллеры - местами опечатки (пробелы после ->), но это фиксится автоматическим форматированием - 
  https://www.jetbrains.com/help/phpstorm/reformat-and-rearrange-code.html ну и главное мое предложение - согласитесь, контроллер
  начинает выглядеть очень громоздко? много методов, много логики внутри - и валидация данных, и работа с БД, и бизнес логика, и
  формирование ответа. Надо бы это разделить:
  * контроллер - отвечает за получение данных из реквеста, валидация данных (через ->validate(), причем используем каждый раз нужный
    нам реквест, и правила валидации из контроллера уходят)
  * сервис - отвечает за бизнес логику (ну и обычно выделяют еще репозитории для работы с БД, но тут это не обязательно)
      работает это все через dependency injection - https://www.dev-notes.ru/articles/laravel/dependency-injection-and-service-container/
      то есть в контроллере у нас будет подготовка данных (например, в массив или в dto), вызов сервиса, внутри которого мы работаем с
      БД через модель, в контроллер возвращается результат в виде объекта модели/bool значения результата/массива с результатом,
      контроллер отдает это наружу
